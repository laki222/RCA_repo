<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.Azure</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.Azure.AzureClientBuilderExtensions">
            <summary>
            Extension methods to configure client registrations.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientBuilderExtensions.WithName``2(Azure.Core.Extensions.IAzureClientBuilder{``0,``1},System.String)">
            <summary>
            Sets the name for the client registration. To resolve named clients use <see cref="M:Microsoft.Extensions.Azure.IAzureClientFactory`1.CreateClient(System.String)" /> method.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The options type the client uses.</typeparam>
            <param name="builder">The client builder instance.</param>
            <param name="name">The name to set.</param>
            <returns>The client builder instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientBuilderExtensions.WithCredential``2(Azure.Core.Extensions.IAzureClientBuilder{``0,``1},Azure.Core.TokenCredential)">
            <summary>
            Set the credential to use for this client registration.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The options type the client uses.</typeparam>
            <param name="builder">The client builder instance.</param>
            <param name="credential">The credential to use.</param>
            <returns>The client builder instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientBuilderExtensions.WithCredential``2(Azure.Core.Extensions.IAzureClientBuilder{``0,``1},System.Func{System.IServiceProvider,Azure.Core.TokenCredential})">
            <summary>
            Set the credential factory to use for this client registration.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The options type the client uses.</typeparam>
            <param name="builder">The client builder instance.</param>
            <param name="credentialFactory">The credential factory to use.</param>
            <returns>The client builder instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientBuilderExtensions.ConfigureOptions``2(Azure.Core.Extensions.IAzureClientBuilder{``0,``1},System.Action{``1})">
            <summary>
            Adds a delegate to configure the client options. All delegates are executed in order they were added.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The options type the client uses.</typeparam>
            <param name="builder">The client builder instance.</param>
            <param name="configureOptions">The delegate to use to configure options.</param>
            <returns>The client builder instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientBuilderExtensions.ConfigureOptions``2(Azure.Core.Extensions.IAzureClientBuilder{``0,``1},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures client options using provided <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> instance.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The options type the client uses.</typeparam>
            <param name="builder">The client builder instance.</param>
            <param name="configuration">The configuration instance to use.</param>
            <returns>The client builder instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientBuilderExtensions.ConfigureOptions``2(Azure.Core.Extensions.IAzureClientBuilder{``0,``1},System.Action{``1,System.IServiceProvider})">
            <summary>
            Adds a delegate to configure the client options. All delegates are executed in order they were added.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The options type the client uses.</typeparam>
            <param name="builder">The client builder instance.</param>
            <param name="configureOptions">The delegate to use to configure options.</param>
            <returns>The client builder instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientBuilderExtensions.WithVersion``3(Azure.Core.Extensions.IAzureClientBuilder{``0,``1},``2)">
            <summary>
            Sets the service version to use for this client registration.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The options type the client uses.</typeparam>
            <typeparam name="TVersion">The service version enum type.</typeparam>
            <param name="builder">The client builder instance.</param>
            <param name="version">The delegate to use to configure options.</param>
            <returns>The client builder instance.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Azure.AzureClientFactoryBuilder">
            <summary>
            The builder type for registering Azure SDK clients.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.ConfigureDefaults(System.Action{Azure.Core.ClientOptions})">
            <summary>
            Adds a configuration delegate that gets executed for all clients.
            </summary>
            <param name="configureOptions">The configuration delegate.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.ConfigureDefaults(System.Action{Azure.Core.ClientOptions,System.IServiceProvider})">
            <summary>
            Adds a configuration delegate that gets executed for all clients.
            </summary>
            <param name="configureOptions">The configuration delegate.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.ConfigureDefaults(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds a configuration instance to initialize all clients from.
            </summary>
            <param name="configuration">The configuration instance.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.UseCredential(Azure.Core.TokenCredential)">
            <summary>
            Sets the credential to use by default for all clients.
            </summary>
            <param name="tokenCredential">The credential to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.UseCredential(System.Func{System.IServiceProvider,Azure.Core.TokenCredential})">
            <summary>
            Sets the credential to use by default for all clients.
            </summary>
            <param name="tokenCredentialFactory">The credential factory to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.AddClient``2(System.Func{``1,``0})">
            <summary>
            Adds a client factory for <typeparamref name="TClient" /> using <typeparamref name="TOptions" /> as options type.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The type of the client options.</typeparam>
            <returns>The <see cref="T:Azure.Core.Extensions.IAzureClientBuilder`2" /> to allow client configuration.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.AddClient``2(System.Func{``1,Azure.Core.TokenCredential,``0})">
            <summary>
            Adds a client factory for <typeparamref name="TClient" /> using <typeparamref name="TOptions" /> as options type and a <see cref="T:Azure.Core.TokenCredential" /> for authentication.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The type of the client options.</typeparam>
            <returns>The <see cref="T:Azure.Core.Extensions.IAzureClientBuilder`2" /> to allow client configuration.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.AddClient``2(System.Func{``1,System.IServiceProvider,``0})">
            <summary>
            Adds a client factory for <typeparamref name="TClient" /> using <typeparamref name="TOptions" /> as options type.
            Allows resolving services from <see cref="T:System.IServiceProvider" /> during the client construction.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The type of the client options.</typeparam>
            <returns>The <see cref="T:Azure.Core.Extensions.IAzureClientBuilder`2" /> to allow client configuration.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.AddClient``2(System.Func{``1,Azure.Core.TokenCredential,System.IServiceProvider,``0})">
            <summary>
            Adds a client factory for <typeparamref name="TClient" /> using <typeparamref name="TOptions" /> as options type and a <see cref="T:Azure.Core.TokenCredential" /> for authentication.
            Allows resolving services from <see cref="T:System.IServiceProvider" /> during the client construction.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <typeparam name="TOptions">The type of the client options.</typeparam>
            <returns>The <see cref="T:Azure.Core.Extensions.IAzureClientBuilder`2" /> to allow client configuration.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Azure.AzureClientServiceCollectionExtensions">
            <summary>
            Azure clients builder extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientServiceCollectionExtensions.AddAzureClients(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Azure.AzureClientFactoryBuilder})">
            <summary>
            Adds the <see cref="T:Microsoft.Extensions.Azure.IAzureClientFactory`1" /> and related services to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            Azure SDK log forwarding to <see cref="T:Microsoft.Extensions.Logging.ILogger" /> is enabled once the configured client is created.
            </summary>
            <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
            <param name="configureClients">An <see cref="T:Microsoft.Extensions.Azure.AzureClientFactoryBuilder" /> that can be used to configure the client.</param>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientServiceCollectionExtensions.AddAzureClientsCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the minimum essential Azure SDK interop services like <see cref="T:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder" /> and <see cref="T:Microsoft.Extensions.Azure.AzureComponentFactory" /> to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> without registering any client types.
            Azure SDK log forwarding to <see cref="T:Microsoft.Extensions.Logging.ILogger" /> is disabled by default. It can be enabled by calling the <see cref="M:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder.Start" /> method.
            Alternatively, you can use the <see cref="M:Microsoft.Extensions.Azure.AzureClientServiceCollectionExtensions.AddAzureClientsCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)" /> overload
            and pass <value>true</value> to enable log forwarding.
            </summary>
            <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientServiceCollectionExtensions.AddAzureClientsCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Adds the minimum essential Azure SDK interop services like <see cref="T:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder" /> and <see cref="T:Microsoft.Extensions.Azure.AzureComponentFactory" /> to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> without registering any client types.
            </summary>
            <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
            <param name="enableLogForwarding">Whether to enable Azure SDK log forwarding to <see cref="T:Microsoft.Extensions.Logging.ILogger" />. If set to <value>false</value>,
            log forwarding can still be enabled by calling the <see cref="M:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder.Start" /> method. Note that even when setting to <value>true</value>,
            you'll need to either inject the <see cref="T:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder" /> somewhere in your app or retrieve it from the service collection.</param>
        </member>
        <member name="T:Microsoft.Extensions.Azure.AzureComponentFactory">
            <summary>
            Exposes methods to create various Azure client related types.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureComponentFactory.CreateTokenCredential(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Azure.Core.TokenCredential" /> from the provided <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> object or returns a current default.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureComponentFactory.CreateClientOptions(System.Type,System.Object,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates an instance of a client options type while applying the global and configuration settings to it.
            </summary>
            <param name="optionsType">Type of the options.</param>
            <param name="serviceVersion">The value of ServiceVersion enum to use, null to use the default.</param>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> instance to apply to options.</param>
            <returns>A new instance of <paramref name="optionsType" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureComponentFactory.CreateClient(System.Type,Microsoft.Extensions.Configuration.IConfiguration,Azure.Core.TokenCredential,System.Object)">
            <summary>
            Creates a new client instance using the provided configuration to map constructor parameters from.
            Optionally takes a set of client option and credential to use when constructing a client.
            </summary>
            <param name="clientType"></param>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> instance to map constructor parameters from.</param>
            <param name="credential">The <see cref="T:Azure.Core.TokenCredential" /> object to use if required by constructor, if null no .</param>
            <param name="clientOptions">The client </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder">
            <summary>
            A type used to forward log messages from Azure SDK <see cref="T:System.Diagnostics.Tracing.EventSource" /> to <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.Azure.AzureComponentFactory" /> using a provided <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.
            </summary>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to forward messages to.</param>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder.Start">
            <summary>
            Initiates the log forwarding from the Azure SDK event sources to a provided <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />, call <see cref="M:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder.Dispose" /> to stop forwarding.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureEventSourceLogForwarder.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Microsoft.Extensions.Azure.IAzureClientFactory`1">
            <summary>
            A factory abstraction for a component that can create Azure client instances with custom configuration for a given logical name.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.Azure.IAzureClientFactory`1.CreateClient(System.String)">
            <summary>
            Creates and configures an <typeparamref name="TClient" /> instance using the configuration that corresponds to the logical name specified by <paramref name="name" />.
            </summary>
            <param name="name">The logical name of the client to create.</param>
            <returns>An instance of <typeparamref name="TClient" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureComponentFactoryImpl.CreateTokenCredential(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Azure.Core.TokenCredential" /> from the provided <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> object or returns a current default.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.ClientOptionsFactory`2.Create(System.String)">
            <summary>
            Returns a configured <typeparamref name="TOptions" /> instance with the given <paramref name="name" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Azure.ClientOptionsMonitor`2.CurrentValue">
            <summary>
            The present value of the options.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.ClientOptionsMonitor`2.Get(System.String)">
            <summary>
            Returns a configured <typeparamref name="TOptions" /> instance with the given <paramref name="name" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.ClientOptionsMonitor`2.OnChange(System.Action{`1,System.String})">
            <summary>
            Registers a listener to be called whenever <typeparamref name="TOptions" /> changes.
            </summary>
            <param name="listener">The action to be invoked when <typeparamref name="TOptions" /> has changed.</param>
            <returns>An <see cref="T:System.IDisposable" /> which should be disposed to stop listening for changes.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.ClientOptionsMonitor`2.Dispose">
            <summary>
            Removes all change registration subscriptions.
            </summary>
        </member>
        <member name="T:Azure.Core.Shared.EventSourceEvent">
            <summary>
            Wraps <see cref="T:System.Diagnostics.Tracing.EventWrittenEventArgs" /> into <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> simplifying iterating over
            payload properties and providing them to logging libraries in a structured way.
            </summary>
        </member>
        <member name="P:Azure.Core.Shared.EventSourceEvent.EventData">
            <summary>
            Gets underlying EventSource event.
            </summary>
        </member>
        <member name="M:Azure.Core.Shared.EventSourceEvent.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Shared.EventSourceEvent.Count">
            <summary>
            Returns the count of payload properties in the Eventsource event.
            </summary>
        </member>
        <member name="M:Azure.Core.Shared.EventSourceEvent.Format">
            <summary>
            Formats EventSource event as a string including all payload properties.
            </summary>
        </member>
        <member name="P:Azure.Core.Shared.EventSourceEvent.Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list.</summary><param name="index">The zero-based index of the element to get.</param><returns>The element at the specified index in the read-only list.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection" />.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute" /> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection" />.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute" /> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" /> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute" /> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute" />. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" />
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category" /> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category" /> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId" />
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target" /> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId" /> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" /> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified signature of a member on a <see cref="T:System.Type" />.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type" /> containing <paramref name="memberSignature" />.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified types of members on a <see cref="T:System.Type" />.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type" /> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" /> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None" />, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" /> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" /> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None" />, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type" /> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" /> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" /> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" /> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" /> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName" /> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" /> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type" /> are accessed dynamically,
             for example through <see cref="N:System.Reflection" />.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type" /> or <see cref="T:System.String" />.
            
             When this attribute is applied to a location of type <see cref="T:System.String" />, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type" /> instances returned from calling
             <see cref="M:System.Object.GetType" /> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute" /> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" /> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="M:Azure.Core.Shared.EventSourceEvent.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.Azure#Core#Extensions#IAzureClientFactoryBuilder#RegisterClientFactory``2(System.Func{``1,``0})">
            <summary>
            Registers a client in the dependency injection container using the factory to create a client instance.
            </summary><typeparam name="TClient">The type of the client.</typeparam><typeparam name="TOptions">The client options type used the client.</typeparam><param name="clientFactory">The factory, that given the instance of options, returns a client instance.</param><returns><see cref="T:Azure.Core.Extensions.IAzureClientBuilder`2" /> that allows customizing the client registration.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.Azure#Core#Extensions#IAzureClientFactoryBuilderWithConfiguration{Microsoft#Extensions#Configuration#IConfiguration}#RegisterClientFactory``2(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers a client in the dependency injection container using the configuration to create a client instance.
            </summary><typeparam name="TClient">The type of the client.</typeparam><typeparam name="TOptions">The client options type used the client.</typeparam><param name="configuration">Instance of <typeparamref name="TConfiguration" /> to use.</param><returns><see cref="T:Azure.Core.Extensions.IAzureClientBuilder`2" /> that allows customizing the client registration.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.AzureClientFactoryBuilder.Azure#Core#Extensions#IAzureClientFactoryBuilderWithCredential#RegisterClientFactory``2(System.Func{``1,Azure.Core.TokenCredential,``0},System.Boolean)">
            <summary>
            Registers a client in dependency injection container the using the factory to create a client instance.
            </summary><typeparam name="TClient">The type of the client.</typeparam><typeparam name="TOptions">The client options type used the client.</typeparam><param name="clientFactory">The factory, that given the instance of options and credential, returns a client instance.</param><param name="requiresCredential">Specifies whether the credential is optional (client supports anonymous authentication).</param><returns><see cref="T:Azure.Core.Extensions.IAzureClientBuilder`2" /> that allows customizing the client registration.</returns>
        </member>
    </members>
</doc>
